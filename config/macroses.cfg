[gcode_macro START_PRINT]
gcode:
  {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
  {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
  
  ##  Set the current back to what's in the printer.cfg file. 
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
  G4 P2000  # Wait 2 seconds… (give StallGuard registers time to clear).  You may need to give this more time if it's not reliable.

  # reset acceleration 
  {% set ACCEL_DEFAULT = printer.configfile.settings['printer'].max_accel|float %}
  {% set ACCEL_TO_DECEL_DEFAULT = printer.configfile.settings['printer'].max_accel_to_decel|float %}
  SET_VELOCITY_LIMIT ACCEL={ACCEL_DEFAULT}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={ACCEL_TO_DECEL_DEFAULT}
  # BED_MESH_PROFILE LOAD=default
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  M220 S100 ;reset feedrate
  M221 S100 ;reset flowrate
  G21 ;metric values
  G90 ;absolute positioning
  M82 ;set extruder to absolute mode
  G92 E0 ;reset extruder
  M107 ;start with the fan off
  # M117 Homing ...
  # G28
  # G1 Z15.0 F140 ;move the platform down 15mm
  M117  Start heating ...
  # STATUS_HEATING
  # Preheat extruder
  {% if printer.extruder.temperature < 150 %}
    M109 S150 # if less - wait untill heated    
  {% elif printer.extruder.temperature > EXTRUDER_TEMP %}
    M104 S{EXTRUDER_TEMP} # cooldown to target temp
  {% else %}
    M104 S{printer.extruder.temperature} # else just keep min. temp
  {% endif %}
  # Start bed heating
  M140 S{BED_TEMP}
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  
  {% if not 'xyz' in printer.toolhead.homed_axes %}
    M117  Homing
    # STATUS_HOMING
    G28
  {% endif %}
  
  BED_MESH_PROFILE LOAD=default
  # PLAY_START_PRINT
  # STATUS_CLEANING
  M117  Cleaning
  G90 ;use absolute coordinates
  M82 ;absolute extrusion mode
  G1 Z5 F1500 ;raise z
  G1 X{printer.toolhead.axis_maximum.x|float - 2.0} Y1 F5000 ;move toolhead out of the bed before purge
  G1 E20 F360 ; extrude previously retracted filament (at print end)
  G92 E0 ;reset extruder

  M117 Wipe line
  ; wipe
  G1 X15 Y2 F5000 ;start position
  G1 Z0.28 F1500 ;lower z
  ; G1 E4 F500 ;prime the filament
  G1 X105 E10 F500 ;1st line 90mm
  G1 Y2.6 F5000
  G1 X15 E20 F500 ;2nd line
  G10 ; retract
  G1 Z2 F1500 ;raise z
  G92 E0 ;reset extruder
  # STATUS_PRINTING
  M117  In Progress 

  
[gcode_macro END_PRINT]
gcode:
  # STATUS_COOLING
  G91 ;use relative coordinates
  # Move nozzle away from print while retracting 40mm
  ; G1 E-4 F1500 ;retract the filament
  G1 X5 Y5 Z0.4 F5000 ;wipe
  G1 E-20 F1300
  # Raise nozzle by 5mm
  G1 Z5 F1500 ;raise z
  G90 ;use absolute coordinates

  G1 X10 Y{printer.toolhead.axis_maximum.x|float - 5.0} F5000 ;park print head
  M107 ;turn off fan
  M104 S0 ;turn off hotend
  M140 S0 ;turn off heatbed
  # M84 ;disable motors
  BED_MESH_CLEAR
  # PLAY_FINISH_PRINT
  # STATUS_PART_READY

  {% set HOLD_CURRENT = 0.2 %}  ## Change this to the vlaue you used when calibrating stallguard.  In your printer.cfg.
  ##  Set the current back to what's in the printer.cfg file. 
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOLD_CURRENT}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOLD_CURRENT}
  G4 P2000  # Wait 2 seconds… 

  SET_IDLE_TIMEOUT TIMEOUT=7200 #2 hour timeout
  M117  Done!


[gcode_macro GRADUALLY_HEAT_BED]
description: Preheats bed gradually, within several iterations, to reduce peak power usage
# variable_gradually_preheat_allowed: False
gcode:
  {% set DEGREE_PER_STEP = params.DEGREE_PER_STEP|default(10)|int %}
  {% set DELAY_IN_SEC = params.DELAY_IN_SEC|default(30)|float %}
  {% set TARGET = params.TARGET|default(60)|float %} # printer.heater_bed.target
  {% set current_bed_temp = printer.heater_bed.temperature|float %}
  {% set temp_difference = TARGET - current_bed_temp %}
  {% set steps_count = (temp_difference//DEGREE_PER_STEP)|int %}
  
  {% if temp_difference > 0 %}
    {% for step in range(steps_count) %}  
      {% set step_temp = current_bed_temp|int + (step+1) * DEGREE_PER_STEP %}
      RESPOND MSG="Preheat bed to {step_temp}"
      M140 S{step_temp} # set bed temp
      M190 S{step_temp} # and wait for temp
      G4 P{DELAY_IN_SEC * 1000} # wait     
    {% endfor %}
  {% endif %}  
  RESPOND MSG="Set final bed temp: {TARGET}"
  M140 S{TARGET}
  M190 S{TARGET}  


[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
      _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    M106 S0

    {% set HOLD_CURRENT = 0.2 %}  ## Change this to the vlaue you used when calibrating stallguard.  In your printer.cfg.
    ##  Set the current back to what's in the printer.cfg file. 
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOLD_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOLD_CURRENT}
    G4 P2000  # Wait 2 seconds… 
    M117  Canceled


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    M117  Pause
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    _TOOLHEAD_PARK_PAUSE_CANCEL
    # STATUS_READY
    SET_IDLE_TIMEOUT TIMEOUT=7200 #2 hour timeout


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    M117  In Progress
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    # STATUS_PRINTING



[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
    ##### set defaults #####
    {% set max_x = printer.toolhead.axis_maximum.x|float - 5 %}
    {% set max_y = printer.toolhead.axis_maximum.y|float - 15 %}
    {% set x = params.X|default(max_x) %}      #edit to your park position
    {% set y = params.Y|default(max_y) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(30) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000


[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    # M300 # beep
    G91
    G92 E0
    G1 E150 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    # M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-120 F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M601]
gcode:
    SAVE_GCODE_STATE NAME=M601_state
    PAUSE
    RESTORE_GCODE_STATE NAME=M601_state

[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further '640' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
gcode:
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    M600
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
  {% endif %}





[gcode_macro T0]
gcode:

[gcode_macro PID_E]
gcode:
  {% set T = params.T|default(230) %}
  # STATUS_HEATING
  PID_CALIBRATE HEATER=extruder TARGET={T}

[gcode_macro PID_B]
gcode:
  {% set T = params.T|default(85) %}
  # STATUS_HEATING
  PID_CALIBRATE HEATER=heater_bed TARGET={T}

[display_template _printing_time]
text:
   {% set ptime = printer["gcode_macro M73"].r %}
   { "%02d:%02d" % (ptime // 60, ptime % 60) }

[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
   {% set P = params.P|default(0)|int %}
   {% set R = params.R|default(0)|int %}
   M73.1 P{P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}

# [gcode_macro G29]
# gcode:
#   STATUS_MESHING
#   BED_MESH_PROFILE LOAD=stock



#### DEBUG ####
[gcode_macro PSTATUS]
gcode:
    {% if params.S3 %}
    {% set info = printer[params.S1][params.S2][params.S3] %}
    {% elif params.S2 %}
    {% set info = printer[params.S1][params.S2] %}
    {% elif params.S1 %}
    {% set info = printer[params.S1] %}
    {% else %}
    {% set	info = printer.idle_timeout.state %}
    {% endif %}
    {action_respond_info(info|string)}